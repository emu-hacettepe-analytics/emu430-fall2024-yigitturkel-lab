---
title: "Assignment 1"
---

# Assignment 1

```{r}
1 + 1
```

My first assignment has two parts.

## (a)

## (b) Question: Complete the following tasks. Be sure to include the R code used to generate these outputs.

1-) Import the "polls_us_election_2016" data set from the dslabs package:

```         
> install.packages("dslabs")
> library(dslabs) 
> data("polls_us_election_2016")

In this solution ı first installed the dslabs library, if ı already have installed ı would not need it. 

2-)Display the first 10 rows of the data set on your web page:

> head("polls_us_election_2016", n=10)

 state  startdate    enddate
1        U.S. 2016-11-03 2016-11-06
2        U.S. 2016-11-01 2016-11-07
3        U.S. 2016-11-02 2016-11-06
4        U.S. 2016-11-04 2016-11-07
5        U.S. 2016-11-03 2016-11-06
6        U.S. 2016-11-03 2016-11-06
7        U.S. 2016-11-02 2016-11-06
8        U.S. 2016-11-03 2016-11-05
9  New Mexico 2016-11-06 2016-11-06
10       U.S. 2016-11-04 2016-11-07
                                                         pollster grade
1                                    ABC News/Washington Post    A+
2                                     Google Consumer Surveys     B
3                                                       Ipsos    A-
4                                                      YouGov     B
5                                            Gravis Marketing    B-
6  Fox News/Anderson Robbins Research/Shaw & Company Research     A
7                                     CBS News/New York Times    A-
8                                NBC News/Wall Street Journal    A-
9                                                    Zia Poll  <NA>
10                                                   IBD/TIPP    A-
   samplesize population rawpoll_clinton rawpoll_trump rawpoll_johnson
1        2220         lv           47.00         43.00            4.00
2       26574         lv           38.03         35.69            5.46
3        2195         lv           42.00         39.00            6.00
4        3677         lv           45.00         41.00            5.00
5       16639         rv           47.00         43.00            3.00
6        1295         lv           48.00         44.00            3.00
7        1426         lv           45.00         41.00            5.00
8        1282         lv           44.00         40.00            6.00
9        8439         lv           46.00         44.00            6.00
10       1107         lv           41.20         42.70            7.10
   rawpoll_mcmullin adjpoll_clinton adjpoll_trump adjpoll_johnson
1                NA        45.20163      41.72430        4.626221
2                NA        43.34557      41.21439        5.175792
3                NA        42.02638      38.81620        6.844734
4                NA        45.65676      40.92004        6.069454
5                NA        46.84089      42.33184        3.726098
6                NA        49.02208      43.95631        3.057876
7                NA        45.11649      40.92722        4.341786
8                NA        43.58576      40.77325        5.365788
9                NA        44.82594      41.59978        7.870127
10               NA        42.92745      42.23545        6.316175
   adjpoll_mcmullin
1                NA
2                NA
3                NA
4                NA
5                NA
6                NA
7                NA
8                NA
9                NA
10               NA
> 
```

3-) Calculate and display the total number of NA values in the entire data set:

\> sum(is.na(polls_us_election_2016))

\[1\] 11604

4-)Replace all NA values in the "polls_us_election_2016" data set as follows: For numeric columns, replace NA values with your birth year. For character or factor columns, replace NA values with your first name. store the modified data set as a new object:

```         
 polls_us_election_2016_modified <- polls_us_election_2016 >  
 > birth_year <- 2003   
 > first_name <- "yigit"  >
 > polls_us_election_2016_modified[] <- lapply(polls_us_election_2016_modified, function(x) {     
 if (is.numeric(x)) { 
  +         x[is.na(x)] <- birth_year 
  +     } else { 
  +         x[is.na(x)] <- first_name +     } 
  +     return(x) 
  + })
```
